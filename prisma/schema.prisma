generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url ="mongodb+srv://aziz:aziz@fluctun.tleszsl.mongodb.net/test?retryWrites=true&w=majority"
}

model institute{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  name String
  logo String // image url
  verified Boolean 
  nbMonths Int @default(0)
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())

  // relations
  admin Admin?  
  students student[]
  teachers teacher[]
}

model document{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  title String 
  url String
  type String?
  size Int?
  levels String[]
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // relations
  teacher teacher @relation(fields: [teacherId],references: [id])
  teacherId String @db.ObjectId
}


model Admin{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName String
  email String @unique
  password String
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // relations
  institute institute @relation(fields: [instituteId],references: [id])
  instituteId String @db.ObjectId @unique
}

model student{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  code String @unique
  password String
  firstName String
  lastName String
  dateOfBirth DateTime?
  level String
  photo String?
  bio String?
  address String?
  number Int?
  questions question[]
  comments comment[]
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // relations
  institute institute @relation(fields: [instituteId],references: [id])
  instituteId String @db.ObjectId
}

model teacher{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  cin String @unique
  password String
  firstName String
  lastName String
  number Int
  dateOfBirth DateTime?
  bio String?
  subject String // speciality
  photo String?
  address String?
  answers answer[]
  comments comment[]
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // relations
  institute institute @relation(fields: [instituteId],references: [id])
  instituteId String @db.ObjectId
  documents document[]
}

model question{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  question String
  description String
  subject String
  answers answer[]
  comments comment[]
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // --------- relations ----------
  // student
  student student @relation(fields: [studentId],references: [id])
  studentId String @db.ObjectId
}

model answer{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  description String
  comments comment[]
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // --------- relations ----------
  // question
  question question @relation(fields: [questionId],references: [id])
  questionId String @db.ObjectId
  // teacher 
  teacher teacher @relation(fields: [teacherId],references: [id])
  teacherId String @db.ObjectId
}

model comment{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  text String
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
  // ----------- relations ------------
  // question
  question question? @relation(fields: [questionId],references: [id])
  questionId String? @db.ObjectId
  // answer 
  answer answer? @relation(fields: [answerId],references: [id])
  answerId String? @db.ObjectId
  // student
  student student? @relation(fields: [studentId],references: [id])
  studentId String? @db.ObjectId
  // teacher
  teacher teacher? @relation(fields: [teacherId],references: [id])
  teacherId String? @db.ObjectId
}

model notification{
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  link String
  createdAt DateTime @default(now())
  lastUpdatedAt DateTime @default(now())
}


